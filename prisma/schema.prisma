datasource db {
  provider = "postgresql"

  url = "postgres://default:3NFysg8QHLaR@ep-yellow-glade-a5un8iv1-pooler.us-east-2.aws.neon.tech:5432/verceldb?sslmode=require&pgbouncer=true&connect_timeout=15"

}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  role          Int             @default(1)
  emailVerified DateTime?
  skype         String?
  telegram      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  affiliates UserAffiliate[]
  bids       Bid[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Terms {
  id        String   @id @default(cuid())
  version   Int
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Affiliate {
  id        Int                @id @default(autoincrement())
  aff_name  String
  aff_url   String
  manager   String?
  block     Int?               @default(0)
  createdAt DateTime           @default(now())
  casinos   casino_p_casinos[]
  managers  UserAffiliate[]
}

model UserAffiliate {
  id          Int       @id @default(autoincrement())
  userId      String
  affiliateId Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())

  @@unique([userId, affiliateId])
  @@index([userId])
  @@index([affiliateId])
}

model casino_p_casinos {
  id            Int     @id @default(autoincrement())
  aff_id        Int?
  casino        String?
  type          String? @default("Casino")
  url           String?
  software      String?
  approved      Int?    @default(0)
  updated       String?
  hot           Int?    @default(0)
  new           Int?    @default(0)
  rogue         Int?    @default(0)
  button        String?
  blurb         String?
  softwareid    Int?    @default(0)
  telephone     String? @default("")
  contactemail  String? @default("")
  livechat      Int?    @default(0)
  mobile        Int?    @default(0)
  homepageimage String?
  livegames     Int?    @default(0)
  clean_name    String? @default("")
  currencies    String? @default("")

  currency_val              Int?    @default(0)
  review_overall            Int?    @default(0)
  nodeposit                 Int?    @default(0)
  freespins                 Int?    @default(0)
  bonus_percent             Int?    @default(0)
  deposit                   Int?    @default(0)
  vercel_image_url          String?
  vercel_image_size         Int?    @default(0)
  vercel_casino_button      String?
  vercel_casino_button_size Int?    @default(0)
  lcb_url                   String?
  timestamp                 Int?    @default(0)

  affiliate       Affiliate?               @relation(fields: [aff_id], references: [id])
  banklist        casino_p_bank_connect[]
  bonuses         casino_p_bonus[]
  jurisdictions   casino_p_jurisdictions[]
  casino_geo      casino_p_restrictions[]
  softwares       casino_p_software_link[]
  ppc             casino_p_ppc[]
  outbounding     outbounding[]
  casinoMappings  CasinoNameMapping[]
  importedBonuses ImportedBonus[]
  unifiedBonuses  UnifiedBonus[]
  ppc_links       ppc_links[]
  Postback        Postback[]
}

model casino_p_ppc {
  id      Int               @id @default(autoincrement())
  casino  Int
  ppc_url String
  casinos casino_p_casinos? @relation(fields: [casino], references: [id], onDelete: Cascade)
}

model casino_p_software {
  id                Int                      @id @default(autoincrement())
  software_name     String?
  status            Int?
  link              String?
  smallimage        String?
  image             String?
  show              Int?
  vercel_image_url  String?
  vercel_image_size Int?
  slots_launch_id   Int?
  games             casino_p_games[]
  softwarelist      casino_p_software_link[]
}

model casino_p_software_link {
  id           Int                @id @default(autoincrement())
  casino       Int?
  software     Int?
  softwares    casino_p_casinos?  @relation(fields: [casino], references: [id], onDelete: Cascade)
  softwarelist casino_p_software? @relation(fields: [software], references: [id], onDelete: Cascade)

  @@unique([casino, software])
  @@index(fields: [casino, software])
}

model casino_p_lcb_juristrictions {
  id                Int                      @id @default(autoincrement())
  name              String
  jurisdiction_data casino_p_jurisdictions[]
}

model casino_p_jurisdictions {
  jid               Int                          @id @default(autoincrement())
  casino_id         Int?
  jurisdiction_id   Int
  jurisdictions     casino_p_casinos?            @relation(fields: [casino_id], references: [id], onDelete: Cascade)
  jurisdiction_data casino_p_lcb_juristrictions? @relation(fields: [jurisdiction_id], references: [id], onDelete: Cascade)

  @@unique([casino_id, jurisdiction_id])
  @@index(fields: casino_id)
}

model casino_p_banks {
  id                     Int                     @id @default(autoincrement())
  name                   String
  display                String
  image                  String?
  largeimage             String?
  description            String?
  rank                   Int?
  status                 Int?
  w                      Int?
  h                      Int?
  tw                     Int?
  th                     Int?
  link                   String?
  vercel_image_url       String?
  vercel_image_size      Int?
  vercel_largeimage_url  String?
  vercel_largeimage_size Int?
  bank_data              casino_p_bank_connect[]

  @@index(fields: [vercel_image_url, vercel_image_size, vercel_largeimage_url, vercel_largeimage_size])
}

model casino_p_bank_connect {
  id        Int               @id @default(autoincrement())
  parent    Int?
  bank      Int?
  type      Int?
  bank_data casino_p_banks?   @relation(fields: [bank], references: [id], onDelete: Cascade)
  banklist  casino_p_casinos? @relation(fields: [parent], references: [id], onDelete: Cascade)

  @@unique([parent, bank])
  @@index(fields: [parent, bank])
}

model casino_p_bonus {
  id               Int               @id @default(autoincrement())
  parent           Int
  game             String?
  freespins        Int?
  freeplay         String?
  nodeposit        Int?
  deposit          Int?
  deposit_amount   Int?
  min_deposit      Int?
  name             String?
  comments         String?
  position         Int?
  code             String?
  active           Int?
  playthrough      Int?
  type             String?
  link             String?
  max_cashout      String?
  cashable         Int?
  exclusive        Int?
  added            String?
  update_main      Int?
  currency         String?
  multi_currency   String?
  wager            Int?              @default(0)
  percent          Int?
  exported         String?
  geo              String?
  geo_deny         String?
  geo_values       Int[]
  geo_type         Int?              @default(0) // 0 for allow, 1 for deny
  url              String?
  currencies       String?
  casino_p_casinos casino_p_casinos? @relation(fields: [parent], references: [id], onDelete: Cascade)

  @@index(fields: [parent, freespins, nodeposit, deposit, deposit_amount, position, active, percent])
}

model casino_p_restrictions {
  id         Int              @id @default(autoincrement())
  casino     Int
  country    String
  allow      Int?
  casino_geo casino_p_casinos @relation(fields: [casino], references: [id], onDelete: Cascade)

  @@unique([casino, country])
  @@index(fields: [casino, country, allow])
}

model currency {
  id     Int    @id @default(autoincrement())
  name   String
  symbol String
}

model casino_p_lcb_countries_codes {
  idcountry   Int    @id
  countrycode String
  countryname String
}

model casino_p_transactions {
  id              Int      @id @default(autoincrement())
  casino          Int?
  game            Int?
  bonus           Int?
  deleted         Int      @default(0)
  implemented_at  DateTime
  sites_completed Int[]
}

model needs_approval {
  id       Int @id @default(autoincrement())
  casino   Int
  approved Int @default(0)
}

model outbounding {
  id          String            @id @default(cuid())
  createdAt   DateTime          @default(now())
  casinoId    Int?
  casino_outs casino_p_casinos? @relation(fields: [casinoId], references: [id], onDelete: Cascade)
  geo         String
  ip          String
  userAgent   String
  referer     String

}

model Newsletter {
  id                Int     @id @default(autoincrement())
  email             String
  siteId            Int
  verified          Int     @default(0)
  verificationToken String? @unique

  @@unique([email, siteId])
}

model ImportedBonus {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Basic Information
  externalId   String?           @unique // data-bonus-id from the website
  title        String
  casino       String
  casino_id    Int? // Changed to match Prisma's conventional naming
  mappedCasino casino_p_casinos? @relation(fields: [casino_id], references: [id]) // Updated relation field name
  code         String?
  validUntil   String
  publishDate  String

  // Stats
  visits   Int @default(0)
  likes    Int @default(0)
  dislikes Int @default(0)

  // Attributes
  players    String
  wagering   String
  minDeposit String
  maxCashOut String
  gameTypes  String

  // Tournament Data
  isTournament     Boolean   @default(false)
  tournamentType   String? // SLOTS, POKER, BLACKJACK, etc.
  registrationDate DateTime? // Registration date for tournaments
  startDate        DateTime?
  endDate          DateTime?
  prizePool        Decimal?  @db.Decimal(10, 2)
  entryFee         Decimal?  @db.Decimal(10, 2)
  minPlayers       Int?
  maxPlayers       Int?
  currentPlayers   Int?      @default(0)
  tournamentStatus String? // UPCOMING, ACTIVE, COMPLETED, CANCELLED
  gameId           Int? // Reference to specific game if tournament is game-specific

  // Notes/Terms
  notes String @db.Text

  // Related Data
  validGames ImportedValidGame[]
  ValidGame  ValidGame[]

  @@index([casino])
  @@index([externalId])
  @@index([casino_id])
  @@index([isTournament])
  @@index([tournamentStatus])
  @@index([startDate, endDate])
}

model ImportedValidGame {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  imageUrl String
  slot_id  Int?

  // Relation to Bonus
  bonus   ImportedBonus @relation(fields: [bonusId], references: [id], onDelete: Cascade)
  bonusId String

  @@index([bonusId])
  @@index([slot_id])
}

model ValidGame {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  imageUrl String
  slot_id  Int? // Reference to casino_p_games

  // Relation to ImportedBonus
  bonus   ImportedBonus @relation(fields: [bonusId], references: [id], onDelete: Cascade)
  bonusId String

  @@index([bonusId])
  @@index([slot_id])
}

model CasinoNameMapping {
  id           Int              @id @default(autoincrement())
  importedName String
  systemName   String
  casinoId     Int
  casino       casino_p_casinos @relation(fields: [casinoId], references: [id])
  active       Boolean          @default(true)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@unique([importedName, systemName], name: "importedName_systemName")
  @@index([importedName])
  @@index([systemName])
  @@index([casinoId])
}

model casino_p_games_image {
  game_image_id       Int            @id @default(0)
  game_image_url      String
  vercel_image_url    String?
  vercel_image_size   Int?
  game_image_alt_text String?
  game_image_name     String?
  game_image_parent   Int
  game_image_position Int?
  w                   Int?
  h                   Int?
  tw                  Int?
  th                  Int?
  status              String?
  game_images         casino_p_games @relation(fields: [game_image_parent], references: [game_id], onDelete: Cascade)
}

model casino_p_slot_details {
  id         Int            @id @default(0)
  parent     Int
  theme      String
  slot_theme casino_p_games @relation(fields: [parent], references: [game_id], onDelete: Cascade)

  @@index(fields: parent)
}

model casino_p_games {
  game_id                Int                           @id @default(0)
  game_land_based        String?
  game_name              String
  game_software          Int
  game_added             String?
  game_progressive       Int?
  game_random_jackpot    Int?
  game_demo              String?
  game_min_bet           String?
  game_max_bet           String?
  game_line_bet          String?
  game_max_payout        String?
  game_bonus_bet         String?
  game_decks             Int?
  game_live_dealer       Int?
  game_reels             Int?
  game_lines             Int?
  game_multi_spin        Int?
  game_bonus_round       Int?
  game_bonus_multipliers Int?
  game_scatters          Int?
  game_free_spins        Int?
  game_wild_slot         Int?
  game_theme             String?
  game_hands             Int?
  game_wild_cards        Int?
  status                 Int?
  game_image             String?
  game_updated           String?
  game_clean_name        String?
  game_payout            String?
  game_fixed_bet         String?
  vercel_image_url       String?
  vercel_image_size      Int?
  review                 casino_p_descriptions_games[]
  software               casino_p_software             @relation(fields: [game_software], references: [id])

  game_images casino_p_games_image[]
  slot_theme  casino_p_slot_details[]

  @@index(fields: [game_software, vercel_image_url, vercel_image_size])
}

model casino_p_descriptions_games {
  id               Int            @id @default(autoincrement())
  parent           Int
  title            String?
  description      String?
  ordered          Int?
  type             Int?
  description_link String?
  record           String?
  static           Int?
  author_id        String?
  review           casino_p_games @relation(fields: [parent], references: [game_id], onDelete: Cascade, map: "description_game_fk")
  updated_at       DateTime?

  @@index(fields: parent)
}

model slotNameMapping {
  id           Int      @id @default(autoincrement())
  importedName String
  systemName   String
  slotId       Int
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([importedName, systemName])
  @@index([slotId])
  @@index([importedName])
}

model Position {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  auctions    Auction[]
}

model Auction {
  id         Int      @id @default(autoincrement())
  positionId Int
  startDate  DateTime
  endDate    DateTime
  minBid     Float
  status     String   @default("PENDING") // PENDING, ACTIVE, COMPLETED, CANCELLED
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  position   Position @relation(fields: [positionId], references: [id], onDelete: Cascade)
  bids       Bid[]

  @@index([positionId])
}

model Bid {
  id        Int      @id @default(autoincrement())
  auctionId Int
  userId    String
  amount    Float
  createdAt DateTime @default(now())
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([auctionId])
  @@index([userId])
}

model UnifiedBonus {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Casino Information
  casinoId        Int?
  casinoName      String
  casinoCleanName String?
  casinoButton    String?
  casino          casino_p_casinos? @relation(fields: [casinoId], references: [id])

  // Bonus Information
  title       String
  code        String?
  validUntil  String?
  publishDate String?

  // Bonus Type and Details
  bonusType       String // FREESPINS, NODEPOSIT, DEPOSIT, DEPOSIT_FREESPINS, TOURNAMENT
  freespins       Int? // Number of free spins if applicable
  depositAmount   Float? // Required deposit amount if applicable
  bonusAmount     Float? // Bonus amount for deposit bonuses
  percentage      Int? // Bonus percentage for deposit matches
  noDepositAmount Float? // Amount for no deposit bonuses
  maxBet          Float? // Maximum bet allowed with bonus
  setBet          Float? // Set bet amount for free spins
  previousDeposit Boolean? // Whether a previous deposit is required

  // Tournament Specific Fields
  isTournament     Boolean   @default(false)
  tournamentType   String? // SLOTS, POKER, BLACKJACK, etc.
  startDate        DateTime?
  endDate          DateTime?
  prizePool        Decimal?  @db.Decimal(10, 2)
  entryFee         Decimal?  @db.Decimal(10, 2)
  currentPlayers   Int?      @default(0)
  tournamentStatus String? // UPCOMING, ACTIVE, COMPLETED, CANCELLED

  // Terms and Conditions
  wagering   String?
  minDeposit String?
  maxCashOut String?
  players    String?
  notes      String? @db.Text

  // Valid Games/Slots Array (stored as JSON)
  validGames Json? // Array of {name, image, cleanName}

  // Stats
  visits   Int @default(0)
  likes    Int @default(0)
  dislikes Int @default(0)

  // Source tracking
  importedBonusId String? @unique // Reference to original imported bonus if this was imported
  sourceType      String // MANUAL, IMPORTED, API

  @@index([casinoId])
  @@index([bonusType])
  @@index([isTournament])
  @@index([tournamentStatus])
  @@index([sourceType])
  @@index([validUntil])
}

model ppc_links {
  id        Int              @id @default(autoincrement())
  casino_id Int
  geo       String           @db.Char(2) // 2 letter country code
  url       String
  casino    casino_p_casinos @relation(fields: [casino_id], references: [id], onDelete: Cascade)

  @@unique([casino_id, geo], name: "casino_id_geo") // Named composite unique constraint
  @@index([casino_id])
  @@index([geo])
}

model Postback {
  id          String   @id @default(cuid())
  clickId     String?
  status      String
  amount      Float?
  currency    String?
  casinoId    Int?
  playerId    String?
  campaign    String?
  campaignId  String?
  depositId   String?
  visitId     String?
  promoId     String?
  ipAddress   String?
  userAgent   String?
  rawData     Json?
  processedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  casino casino_p_casinos? @relation(fields: [casinoId], references: [id])

  @@index([clickId])
  @@index([casinoId])
  @@index([processedAt])
  @@index([campaignId])
  @@index([depositId])
  @@index([visitId])
}
